---
include:
  - project: "ctek/gitlab/pipeline/templates"
    file: "linting/all-linters.yml"
    ref: 1.4.2
  - project: "ctek/gitlab/pipeline/templates"
    file: "/workflow/semantic-release-template.yml"
    ref: 1.2.0

stages:
  - lint
  - depndencies
  - pre-staging
  - build
  - release

.docker_login_call: &docker_login_call
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

.rules_not_on_tags: &rules_not_on_tags
  if: $CI_COMMIT_TAG
  when: never

.rules_not_on_semantic_release: &rules_not_on_semantic_release
  if: '$CI_COMMIT_MESSAGE =~ /^chore\(release\).*/'
  when: never

.rules_not_on_merge_request: &rules_not_on_merge_request
  if: $CI_MERGE_REQUEST_ID
  when: never

.build_staging_image:
  stage: pre-staging
  image: docker:stable-git
  services:
    - docker:stable-dind
  before_script:
    - *docker_login_call
  script:
    - docker build --tag $STAGING_IMAGE_NAME -f $IMAGE_NAME/Dockerfile.gitlab .
  after_script:
    - docker push $STAGING_IMAGE_NAME
  rules:
    - *rules_not_on_tags
    - *rules_not_on_semantic_release
    - *rules_not_on_merge_request
    - when: on_success

.build_functionality:
  stage: build
  image: docker:stable-git
  services:
    - docker:stable-dind
  before_script:
    - *docker_login_call
  script:
    - docker build --tag $CI_REGISTRY_IMAGE/$IMAGE_NAME:latest -f $DOCKERFILE_LOCATION .
  after_script:
    - docker push $CI_REGISTRY_IMAGE/$IMAGE_NAME:latest
  rules:
    - changes:
        - "$IMAGE_NAME/*"
      when: on_success
    - if: $CI_COMMIT_TAG
      when: always
    - when: on_success

dockerfile:
  stage: lint
  extends: .dockerfile-lint-template
  allow_failure: false
  script:
    - for f in $(find . -name "Dockerfile.gitlab"); do echo "Testing $FLAGS $f";hadolint $f;done
  rules:
    - *rules_not_on_tags
    - *rules_not_on_semantic_release
    - changes:
        - "**/Dockerfile.gitlab"
        - "**/*.yaml"
      when: on_success

build dependencies:
  stage: depndencies
  image: docker:stable-git
  services:
    - docker:stable-dind
  before_script:
    - *docker_login_call
  script:
    - docker build --tag $CI_REGISTRY_IMAGE:dependencies -f Docker/dependencies/Dockerfile .
  after_script:
    - docker push $CI_REGISTRY_IMAGE:dependencies
  rules:
    - *rules_not_on_tags
    - *rules_not_on_semantic_release
    - *rules_not_on_merge_request
    - changes:
        - "**/pom.xml"
        - Docker/dependencies/Dockerfile
        - Docker/dependencies/artifactory-settings.xml
        - coastal-hazards-geoserver/Dockerfile.gitlab
        - coastal-hazards-liquibase/Dockerfile.gitlab
        - coastal-hazards-n52/Dockerfile.gitlab
        - coastal-hazards-portal/Dockerfile.gitlab

semantic-release:
  stage: release
  extends:
    - .semantic-release-template
  rules:
    - *rules_not_on_tags
    - *rules_not_on_semantic_release
    - *rules_not_on_merge_request
    - when: on_success
  artifacts:
    when: on_success
    paths:
      - .branch_identifier.txt

staging rserve:
  extends:
    - .build_staging_image
  variables:
    IMAGE_NAME: rserve
    DOCKERFILE_LOCATION: "Docker/${IMAGE_NAME}/Dockerfile.gitlab"
    STAGING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:staging-${CI_COMMIT_BRANCH}"

# portal:
#   extends: .build_functionality
#   variables:
#     IMAGE_NAME: coastal-hazards-portal

# n52:
#   extends: .build_functionality
#   variables:
#     IMAGE_NAME: coastal-hazards-n52

# geoserver:
#   extends: .build_functionality
#   variables:
#     IMAGE_NAME: coastal-hazards-geoserver

# liquibase:
#   extends: .build_functionality
#   variables:
#     IMAGE_NAME: coastal-hazards-liquibase

# rserve:
#   stage: build
#   image: docker:stable-git
#   variables:
#     IMAGE_NAME: rserve
#   services:
#     - docker:stable-dind
#   before_script:
#     - *docker_login_call
#   script:
#     - docker build --tag $CI_REGISTRY_IMAGE/$IMAGE_NAME:latest -f Docker/$IMAGE_NAME/Dockerfile.gitlab .
#   after_script:
#     - docker push $CI_REGISTRY_IMAGE/$IMAGE_NAME:latest
#   rules:
#     - changes:
#         - "Docker/rserve/*"
#       when: on_success
#     - if: $CI_COMMIT_TAG
#       when: always
